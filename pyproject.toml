[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ArrEm-sync"
dynamic = ["version"]
description = "Sync tags from Radarr/Sonarr to Emby media server"
requires-python = ">=3.13"
keywords = ["media", "radarr", "sonarr", "emby", "sync", "tags"]

dependencies = [
    "requests>=2.31.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.5.0",
    "click>=8.1.7",
    "python-dotenv>=1.0.0",
]

[dependency-groups]
dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.0",
    "pytest-mock>=3.14.0",
    "pytest-cov>=6.0.0",
    "responses>=0.25.3",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "types-requests>=2.32.4",
]

[project.scripts]
arrem-sync = "arrem_sync.cli:cli"

[project.urls]
Homepage = "https://github.com/bjw-s-labs/ArrEm-sync"
Repository = "https://github.com/bjw-s-labs/ArrEm-sync"
Issues = "https://github.com/bjw-s-labs/ArrEm-sync/issues"
Changelog = "https://github.com/bjw-s-labs/ArrEm-sync/releases"

# Testing configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["."]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore:The configuration option \"asyncio_default_fixture_loop_scope\" is unset:pytest.PytestDeprecationWarning",
]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["arrem_sync"]
omit = [
    "tests/*",
    "setup.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration (modern linter and formatter)
[tool.ruff]
target-version = "py313"
line-length = 120

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "RUF", # ruff-specific rules
]
ignore = [
    "S101",  # assert-used (we use asserts in tests)
    "T201",  # print found (we use print in CLI)
    "S104",  # possible-binding-to-all-interfaces
    "S608",  # possible-sql-injection (false positives)
]
unfixable = [
    "F401",  # unused-import
    "F841",  # unused-variable
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S105", "S106", "S107", "S108"]
"**/__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
# Hatchling: read version from arrem_sync/version.py
[tool.hatch.version]
path = "arrem_sync/version.py"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "responses.*",
    "pytest_mock.*",
]
ignore_missing_imports = true
